# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Python.gitlab-ci.yml

# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python/tags/
#image: python:latest

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  PY_VERSION: "3.11"
  ENV_NAME: "test_tbgat"

# https://pip.pypa.io/en/stable/topics/caching/
cache:
  paths:
    - .cache/pip

stages:
  - setup
  - install
  - test
  - pages
  - deploy
  - teardown

#before_script:
#  - python --version ; pip --version  # For debugging
#  - pip install virtualenv
#  - virtualenv venv
#  - source venv/bin/activate
#  - conda create --name test_tbgat python=3.11
#  - conda activate test_tbgat
#  - pip install -U poetry setuptools
#  - poetry install --with test

#after_script:
#  - conda remove -n test_tbgat --all

# pages:
#   stage: doall
#   script:
#     - conda create --name test_tbgat python=3.11
#     - conda activate test_tbgat
#     - conda info
#     - D:\anaconda3\envs\test_tbgat\python.exe -m pip install -U poetry setuptools twine #TODO: Get python executable
#     - D:\anaconda3\envs\test_tbgat\python.exe -m poetry install --extras ner --with dev
#     - D:\anaconda3\envs\test_tbgat\python.exe -m poetry run sphinx-build -a -E -b html docs public 
#     - D:\anaconda3\envs\test_tbgat\python.exe -m poetry build
#     - D:\anaconda3\envs\test_tbgat\python.exe -m twine upload -u gitlab-ci-token -p ${CI_JOB_TOKEN} --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*
#     - conda remove -n test_tbgat --all -y
#   artifacts:
#     untracked: false
#     when: on_success
#     access: all
#     expire_in: 30 days
#     paths:
#       - public


setup:
  stage: setup
  script:
    - conda create --name ${ENV_NAME} python=${PY_VERSION}
    - echo "PYTHON_EXECUTABLE=$((conda env export -n ${ENV_NAME} --json | ConvertFrom-Json).prefix)\python.exe" >> build.env
  when: always
  artifacts:
    reports:
      dotenv: build.env


install:
  stage: install
  script:
    - '& ${PYTHON_EXECUTABLE} -m pip install -U poetry setuptools'
    - '& ${PYTHON_EXECUTABLE} -m poetry install --extras ner --with dev'
  when: always

test:
  stage: test
  needs:
    - setup
    - install
  script:
    - '& ${PYTHON_EXECUTABLE} -m pytest --cov --cov-report term --cov-report xml:coverage.xml --junitxml=report.xml'
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit: report.xml
  when: always

pages:
 stage: pages
 needs:
   - setup
   - install
 script: 
   - '& ${PYTHON_EXECUTABLE} -m poetry run sphinx-build -a -E -b html docs public' 
 artifacts:
   untracked: false
   when: on_success
   access: all
   expire_in: 30 days
   paths:
     - public
 when: always

deploy:
  stage: deploy
  needs:
    - setup
    - install
  script:
    - '& ${PYTHON_EXECUTABLE} -m poetry build'
    - '& ${PYTHON_EXECUTABLE} -m twine upload -u gitlab-ci-token -p ${CI_JOB_TOKEN} --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*'
  when: always

teardown:
  stage: teardown
  when: always
  script:
    - conda remove -n test_tbgat --all -y

#run:
#  script:
#    - pip install .
    # run the command here
#  artifacts:
#    paths:
#      - build/*

#pages:
#  script:
#    - pip install sphinx sphinx-rtd-theme
#    - cd doc
#    - make html
#    - mv build/html/ ../public/
#  artifacts:
#    paths:
#      - public
#  rules:
#    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

#deploy:
#  stage: deploy
#  script: echo "Define your deployment script!"
#  environment: production
